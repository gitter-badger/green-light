plugins {
    id 'org.springframework.boot' version '2.1.9.RELEASE' apply false
    id 'io.spring.dependency-management' version '1.0.8.RELEASE' apply false
    id "org.sonarqube" version "2.8"
    id 'com.diffplug.gradle.spotless' version '3.10.0' apply false
}

version = '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
    jcenter()
}

apply plugin: 'jacoco'

def allTestCoverageFile = "$rootDir/build/jacoco/allTestCoverage.exec"
sonarqube {
    properties {
        property "sonar.projectKey", "your.org:YourProject"
        property "sonar.projectName", "YourProject"
        property "sonar.jacoco.reportPaths", allTestCoverageFile
    }
}

subprojects {
    group = 'com.greenlight'

    repositories {
        mavenCentral()
        jcenter()
    }

    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.diffplug.gradle.spotless'

    sourceCompatibility = '11'
    targetCompatibility = '11'

    dependencies {
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'junit', module: 'junit'
        }
        testImplementation 'org.junit.jupiter:junit-jupiter-api'
        testImplementation 'org.junit.jupiter:junit-jupiter-engine'
    }

    test {
        useJUnitPlatform()
    }

    spotless {
        enforceCheck = false
        java {
            googleJavaFormat()
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
            csv.enabled = false
        }
    }
    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    minimum = 0.5
                }
            }
        }
    }
}

task jacocoMergeTest(type: JacocoMerge) {
    destinationFile = file(allTestCoverageFile)
    executionData = project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
}

task jacocoMerge(dependsOn: ['jacocoMergeTest']) {
    // used to run the other merge tasks
}

task collectJars {
    doLast {
        def jars = project.fileTree(dir: '.', include: '**/build/libs/*.jar')
        print jars.forEach { jarArchive ->
            copy {
                from jarArchive
                into "$rootDir/build/libs"
            }
        }
    }
}
